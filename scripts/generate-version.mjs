#!/usr/bin/env node
import { execSync } from 'node:child_process';
import { writeFileSync } from 'node:fs';
import { fileURLToPath } from 'node:url';
import { dirname, join } from 'node:path';
import { readFileSync } from 'node:fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

function resolveSha(command) {
  try {
    return execSync(command, { stdio: ['ignore', 'pipe', 'ignore'] }).toString().trim();
  } catch (error) {
    return 'unknown';
  }
}

const rootDir = join(__dirname, '..');
const packageJson = JSON.parse(readFileSync(join(rootDir, 'package.json'), 'utf8'));

const commitSha = resolveSha('git rev-parse HEAD');
const shortCommitSha =
  commitSha !== 'unknown' ? resolveSha('git rev-parse --short HEAD') || commitSha.slice(0, 7) : 'unknown';
const buildTime = new Date().toISOString();
const version = packageJson.version ?? '0.0.0';

const banner = `// Auto-generated by scripts/generate-version.mjs\n`;
const contents = `${banner}export const VERSION = '${version}';\nexport const BUILD_TIME = '${buildTime}';\nexport const COMMIT_SHA = '${commitSha}';\nexport const COMMIT_SHA_SHORT = '${shortCommitSha}';\n`;

const outputPath = join(rootDir, 'src', 'app', 'version.ts');
writeFileSync(outputPath, contents, 'utf8');
